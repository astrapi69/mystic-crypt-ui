/**
 * The MIT License
 *
 * Copyright (C) 2015 Asterios Raptis
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
package io.github.astrapi69.mystic.crypt.panel.certificate;

import javax.swing.*;

import lombok.Getter;
import io.github.astrapi69.crypt.data.certificate.CertificateInfo;
import io.github.astrapi69.model.BaseModel;
import io.github.astrapi69.model.api.IModel;
import io.github.astrapi69.swing.base.BasePanel;

/**
 *
 * @author astrapi69
 */
@Getter
public class CertificatePanel extends BasePanel<CertificateInfo>
{

	/**
	 * The Constant serialVersionUID.
	 */
	private static final long serialVersionUID = 1L;
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private JComboBox<String> cmbFingerprintAlgorithm;

	private JLabel lblFingerprint;

	private JLabel lblIssuedBy;


	private JLabel lblIssuedTo;
	private JLabel lblPublicKey;
	private JLabel lblSerialNumber;
	private JLabel lblSignatureAlgorithm;
	private JLabel lblValidFrom;
	private JLabel lblValidUntil;
	private JLabel lblVersion;
	private JScrollPane scrPublicKey;
	private JTextField txtFingerprint;
	private JTextField txtIssuedBy;
	private JTextField txtIssuedTo;
	private JTextArea txtPublicKey;
	private JTextField txtSerialNumber;
	private JTextField txtSignatureAlgorithm;
	private JTextField txtValidFrom;
	private JTextField txtValidUntil;
	private JTextField txtVersion;

	// End of variables declaration//GEN-END:variables

	public CertificatePanel()
	{
		this(BaseModel.of(CertificateInfo.builder().build()));
	}

	public CertificatePanel(final IModel<CertificateInfo> model)
	{
		super(model);
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT
	 * modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents()
	{

	}// </editor-fold>//GEN-END:initComponents


	@Override
	protected void onInitializeComponents()
	{
		super.onInitializeComponents();
		lblIssuedTo = new JLabel();
		txtIssuedTo = new JTextField();
		lblIssuedBy = new JLabel();
		txtIssuedBy = new JTextField();
		lblVersion = new JLabel();
		txtVersion = new JTextField();
		lblSerialNumber = new JLabel();
		txtSerialNumber = new JTextField();
		lblValidFrom = new JLabel();
		txtValidUntil = new JTextField();
		txtValidFrom = new JTextField();
		lblValidUntil = new JLabel();
		lblSignatureAlgorithm = new JLabel();
		txtFingerprint = new JTextField();
		lblFingerprint = new JLabel();
		txtSignatureAlgorithm = new JTextField();
		cmbFingerprintAlgorithm = new JComboBox<>();
		lblPublicKey = new JLabel();
		scrPublicKey = new JScrollPane();
		txtPublicKey = new JTextArea();

		lblIssuedTo.setText("Issued to");

		txtIssuedTo.setToolTipText("");

		lblIssuedBy.setText("Issued by");

		txtIssuedBy.setToolTipText("");

		lblVersion.setText("Version");

		lblSerialNumber.setText("Serial number");

		lblValidFrom.setText("Valid from");

		lblValidUntil.setText("Valid until");

		lblSignatureAlgorithm.setText("Signature algorithm");

		lblFingerprint.setText("Fingerprint");

		cmbFingerprintAlgorithm.setModel(
			new DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

		lblPublicKey.setText("Public key");

		txtPublicKey.setColumns(20);
		txtPublicKey.setRows(5);
		scrPublicKey.setViewportView(txtPublicKey);

	}

	@Override
	protected void onInitializeLayout()
	{
		super.onInitializeLayout();
		onInitializeGroupLayout();
	}

	protected void onInitializeGroupLayout()
	{
		GroupLayout layout = new GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
			.addGroup(layout.createSequentialGroup().addGap(63, 63, 63)
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
					.addComponent(lblPublicKey, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE,
						Short.MAX_VALUE)
					.addComponent(lblFingerprint, GroupLayout.DEFAULT_SIZE,
						GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
					.addComponent(lblSignatureAlgorithm, GroupLayout.DEFAULT_SIZE,
						GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
					.addComponent(lblValidFrom, GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
					.addComponent(lblSerialNumber, GroupLayout.DEFAULT_SIZE,
						GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
					.addComponent(lblVersion, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE,
						Short.MAX_VALUE)
					.addComponent(lblIssuedBy, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE,
						Short.MAX_VALUE)
					.addComponent(lblIssuedTo, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE,
						Short.MAX_VALUE)
					.addComponent(lblValidUntil, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE,
						Short.MAX_VALUE))
				.addGap(47, 47, 47)
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
					.addComponent(txtIssuedTo)
					.addComponent(txtIssuedBy, GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
					.addComponent(txtVersion, GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
					.addComponent(txtSerialNumber).addComponent(txtValidUntil)
					.addComponent(txtValidFrom).addComponent(txtSignatureAlgorithm)
					.addGroup(layout.createSequentialGroup()
						.addComponent(txtFingerprint, GroupLayout.PREFERRED_SIZE, 309,
							GroupLayout.PREFERRED_SIZE)
						.addGap(18, 18, 18).addComponent(cmbFingerprintAlgorithm, 0,
							GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
					.addComponent(scrPublicKey))
				.addContainerGap(82, Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
			.addGroup(layout.createSequentialGroup().addGap(38, 38, 38)
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
					.addComponent(lblIssuedTo).addComponent(txtIssuedTo, GroupLayout.PREFERRED_SIZE,
						GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
				.addGap(18, 18, 18)
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
					.addComponent(lblIssuedBy).addComponent(txtIssuedBy, GroupLayout.PREFERRED_SIZE,
						GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
				.addGap(18, 18, 18)
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
					.addComponent(lblVersion).addComponent(txtVersion, GroupLayout.PREFERRED_SIZE,
						GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
				.addGap(18, 18, 18)
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
					.addComponent(lblSerialNumber).addComponent(txtSerialNumber,
						GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
						GroupLayout.PREFERRED_SIZE))
				.addGap(17, 17, 17)
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
					.addComponent(lblValidFrom).addComponent(txtValidFrom,
						GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
						GroupLayout.PREFERRED_SIZE))
				.addGap(18, 18, 18)
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
					.addComponent(txtValidUntil, GroupLayout.PREFERRED_SIZE,
						GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addComponent(lblValidUntil))
				.addGap(18, 18, 18)
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
					.addComponent(lblSignatureAlgorithm).addComponent(txtSignatureAlgorithm,
						GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
						GroupLayout.PREFERRED_SIZE))
				.addGap(18, 18, 18)
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
					.addComponent(lblFingerprint)
					.addComponent(txtFingerprint, GroupLayout.PREFERRED_SIZE,
						GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addComponent(cmbFingerprintAlgorithm, GroupLayout.PREFERRED_SIZE,
						GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
				.addGap(18, 18, 18)
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
					.addComponent(lblPublicKey).addComponent(scrPublicKey,
						GroupLayout.PREFERRED_SIZE, 280, GroupLayout.PREFERRED_SIZE))
				.addContainerGap(56, Short.MAX_VALUE)));
	}

}
