
buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
    }
}

plugins {
    id "io.franzbecker.gradle-lombok" version "4.0.0"
    id "org.springframework.boot" version "2.3.0.RELEASE"
    id "io.spring.dependency-management" version "1.0.9.RELEASE"
    id "java"
    id "maven-publish"
    id "signing"
    id "idea"
    id "net.ltgt.apt" version "0.21"
    id "net.ltgt.apt-idea" version "0.21"
    id "com.github.ben-manes.versions" version "0.28.0"
    id "com.github.hierynomus.license" version "0.15.0"
}

apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "net.ltgt.apt-idea"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "jacoco"

group = "$groupPackage"
version = "$projectVersion"
description = "$rootProject.name"
sourceCompatibility = "$projectSourceCompatibility"

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
}

dependencies {
    compileOnly("org.projectlombok:lombok:$lombokVersion")
    annotationProcessor("org.projectlombok:lombok:$lombokVersion")

    implementation("de.alpharogroup:crypt-api:$cryptApiVersion")
    implementation("de.alpharogroup:crypt-data:$cryptDataVersion")
    implementation("de.alpharogroup:mystic-crypt:$mysticCryptVersion")
    implementation("de.alpharogroup:checksum-up:$checksumUpVersion")
    implementation("de.alpharogroup:model-object:$modelObjectVersion")
    implementation("de.alpharogroup:model-type-safe:$modelTypeSafeVersion")
    implementation("com.thoughtworks.xstream:xstream:$xstreamVersion")
    implementation("de.alpharogroup:throw-able:$throwAbleVersion")
    implementation("de.alpharogroup:xml-extensions:$xmlExtensionsVersion")
    implementation("de.alpharogroup:file-worker:$fileWorkerVersion")
    implementation("de.alpharogroup:jcommons-lang:$jcommonsLangVersion")
    implementation("de.alpharogroup:swing-components:$swingComponentsVersion")
    implementation("com.google.guava:guava:$guavaVersion")
    implementation("javax.help:javahelp:$javahelpVersion")
    implementation("org.swinglabs:swing-layout:$swingLayoutVersion")
    implementation("org.swinglabs:jxlayer:$jxlayerVersion")
    implementation("org.swinglabs:swing-worker:$swingWorkerVersion")
    implementation("org.swinglabs.swingx:swingx-all:$swingxAllVersion")
    implementation("com.miglayout:miglayout-swing:$miglayoutSwingVersion")
    implementation("xml-apis:xml-apis:$xmlApisVersion")
    implementation("org.springframework.boot:spring-boot-starter-integration:$springBootVersion")
    implementation("org.springframework.boot:spring-boot-starter-validation:$springBootVersion")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
}

license {
    ext.year="2015"
    ext.owner="Asterios Raptis"
    header rootProject.file("src/main/resources/LICENSE.txt")
    excludes(["**/README",
              "**/README.md",
              "**/LICENSE",
              "**/NOTICE",
              "**/*.xml",
              "**/*.xsl",
              "**/*.xsd",
              "**/*.dtd",
              "**/*.html",
              "**/*.jsp",
              "**/*.jpa",
              "**/*.sql",
              "**/*.properties",
              "**/*.bat",
              "**/*.gradle",
              "**/*.MF",
              "**/*.txt",
              "**/*.vm",
              "**/*.log",
              "**/*.map",
              "**/*.js.map",
              "**/*.tmpl",
              "**/*.js.tmpl",
              "**/*.editorconfig",
              "**/*.lombok.config",
              "src/test/resources/**",
              "src/main/resources/**",
              "out/**",
              "build/**"])
}

// workhack for license issue #76
gradle.startParameter.excludedTaskNames += "licenseMain"
gradle.startParameter.excludedTaskNames += "licenseTest"

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from(sourceSets.main.allJava)
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier.set("javadoc")
    javadoc.properties.failOnError = true
}

def releaseVersion = !version.endsWith("SNAPSHOT")

signing {
    if (releaseVersion) {
        sign publishing.publications.mavenJava
    }
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

check.dependsOn jacocoTestReport


