
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "io.freefair.gradle:lombok-plugin:$gradlePluginLombokVersion"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootGradlePluginVersion"
        classpath "io.spring.gradle:dependency-management-plugin:$springGradlePluginDependencyManagementVersion"
        classpath "com.github.ben-manes:gradle-versions-plugin:$gradlePluginVersionsVersion"
        classpath "gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:$licenseGradlePluginVersion"
        classpath "net.ltgt.gradle:gradle-apt-plugin:$gradleAptPluginVersion"
        classpath "com.bmuschko:gradle-izpack-plugin:$gradleIzpackPluginVersion"
    }
}

apply plugin: "io.freefair.lombok"
apply plugin: "java"
apply plugin: "com.bmuschko.izpack"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "java-library"
apply plugin: "maven-publish"
apply plugin: "signing"
apply plugin: "com.github.ben-manes.versions"
apply plugin: "com.github.hierynomus.license"
apply plugin: "jacoco"

group = "$groupPackage"
version = "$projectVersion"
description = "$rootProject.name"
sourceCompatibility = "$projectSourceCompatibility"

repositories {
    mavenLocal()
    mavenCentral()
}

izpack {
    baseDir = file("$buildDir")
    installFile = file("src/main/izpack/install.xml")
    outputFile = file("$buildDir/distributions/$rootProject.name-${projectVersion}-installer.jar")
    compression = "deflate"
    compressionLevel = 9
    appProperties = ["app.group": "$groupPackage",
                     "app.name": "$rootProject.name",
                     "app.title": "$rootProject.name",
                     "app.version": "$projectVersion",
                     "app.subpath": "$rootProject.name-${projectVersion}"]
}

license {
    ext.year="$projectInceptionYear"
    ext.owner="$projectLeaderName"
    header rootProject.file("src/main/resources/LICENSE.txt")
    excludes(["**/README",
              "**/README.md",
              "**/LICENSE",
              "**/NOTICE",
              "**/*.xml",
              "**/*.xsl",
              "**/*.xsd",
              "**/*.dtd",
              "**/*.html",
              "**/*.jsp",
              "**/*.jpa",
              "**/*.sql",
              "**/*.properties",
              "**/*.bat",
              "**/*.gradle",
              "**/*.MF",
              "**/*.txt",
              "**/*.vm",
              "**/*.log",
              "**/*.map",
              "**/*.js.map",
              "**/*.tmpl",
              "**/*.mcrdb",
              "**/*.js.tmpl",
              "**/*.editorconfig",
              "**/*.lombok.config",
              "src/test/resources/**",
              "src/main/resources/**",
              "out/**",
              "build/**"])
}

// workhack for license issue #76
gradle.startParameter.excludedTaskNames += "licenseMain"
gradle.startParameter.excludedTaskNames += "licenseTest"

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from(sourceSets.main.allJava)
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier.set("javadoc")
    javadoc.properties.failOnError = true
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

check.dependsOn jacocoTestReport

dependencies {
    izpack("org.codehaus.izpack:izpack-standalone-compiler:$izpackVersion")
    compileOnly("org.projectlombok:lombok:$lombokVersion")
    annotationProcessor("org.projectlombok:lombok:$lombokVersion")

    implementation("org.pf4j:pf4j:$pf4jVersion")
    implementation("com.google.guava:guava:$guavaVersion")
    implementation("javax.help:javahelp:$javahelpVersion")
    implementation("org.swinglabs:swing-layout:$swingLayoutVersion")
    implementation("org.swinglabs:jxlayer:$jxlayerVersion")
    implementation("org.swinglabs:swing-worker:$swingWorkerVersion")
    implementation("org.swinglabs.swingx:swingx-all:$swingxAllVersion")
    implementation("com.miglayout:miglayout-swing:$miglayoutSwingVersion")
    implementation("commons-codec:commons-codec:$commonsCodecVersion")
    implementation("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
    implementation("com.thoughtworks.xstream:xstream:$xstreamVersion")
    implementation("org.bouncycastle:bcprov-jdk15on:$bouncycastleVersion")
    implementation("org.bouncycastle:bcprov-ext-jdk15on:$bouncycastleVersion")
    implementation("org.bouncycastle:bcpkix-jdk15on:$bouncycastleVersion")
    implementation("org.freedesktop.tango:tango-icon-theme:$tangoIconThemeVersion")
    implementation("io.github.astrapi69:silk-icon-theme:$silkIconThemeVersion")
    implementation("io.github.astrapi69:silly-collections:$sillyCollectionsVersion")
    implementation("io.github.astrapi69:silly-beans:$sillyBeansVersion")
    implementation("io.github.astrapi69:crypt-api:$cryptApiVersion")
    implementation("io.github.astrapi69:crypt-data:$cryptDataVersion")
    implementation("io.github.astrapi69:checksum-up:$checksumUpVersion")
    implementation("io.github.astrapi69:mystic-crypt:$mysticCryptVersion")
    implementation("io.github.astrapi69:randomizer-core:$randomizerVersion")
    implementation("io.github.astrapi69:randomizer-data:$randomizerVersion")
    implementation("io.github.astrapi69:model-api:$modelObjectVersion")
    implementation("io.github.astrapi69:model-object:$modelObjectVersion")
    implementation("io.github.astrapi69:model-type-safe:$modelTypeSafeVersion")
    implementation("io.github.astrapi69:throw-able:$throwAbleVersion")
    implementation("io.github.astrapi69:file-worker:$fileWorkerVersion")
    implementation("io.github.astrapi69:jobj-core:$jobjCoreVersion")
    implementation("io.github.astrapi69:swing-components:$swingComponentsVersion")
    implementation("io.github.astrapi69:menu-actions:$menuActionsVersion")
    implementation("io.github.astrapi69:net-extensions:$netExtensionsVersion")
    // implementation("io.github.astrapi69:swing-menu-pf4j-plugin:1.0.0-SNAPSHOT")
    implementation("io.github.astrapi69:xml-extensions:$xmlExtensionsVersion")
    implementation("io.github.astrapi69:gson-extensions:$gsonExtensionsVersion")
    implementation("io.github.astrapi69:json-extensions:$jsonExtensionsVersion")
    implementation("org.springframework.boot:spring-boot-starter-integration")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
}
